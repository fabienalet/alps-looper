/**************************************************************************** 
*
* alps/looper: multi-cluster quantum Monte Carlo algorithm for spin systems
*              in path-integral and SSE representations
*
* $Id: weight.h 408 2003-10-10 09:34:54Z wistaria $
*
* Copyright (C) 1997-2003 by Synge Todo <wistaria@comp-phys.org>,
*
* Permission is hereby granted, free of charge, to any person or organization 
* obtaining a copy of the software covered by this license (the "Software") 
* to use, reproduce, display, distribute, execute, and transmit the Software, 
* and to prepare derivative works of the Software, and to permit others
* to do so for non-commerical academic use, all subject to the following:
*
* The copyright notice in the Software and this entire statement, including 
* the above license grant, this restriction and the following disclaimer, 
* must be included in all copies of the Software, in whole or in part, and 
* all derivative works of the Software, unless such copies or derivative 
* works are solely in the form of machine-executable object code generated by 
* a source language processor.
*
* In any scientific publication based in part or wholly on the Software, the
* use of the Software has to be acknowledged and the publications quoted
* on the web page http://www.alps.org/license/ have to be referenced.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
* DEALINGS IN THE SOFTWARE.
*
**************************************************************************/

#ifndef LOOPER_WEIGHT_H
#define LOOPER_WEIGHT_H

#include <boost/throw_exception.hpp>
#include <cmath>
#include <stdexcept>

namespace looper {

class path_integral_weight
{
public:
  path_integral_weight(double Jxy = 1, double Jz = 1)
  {
    Jxy = std::abs(Jxy); // ignore negative signs
    if (Jxy == 0 && Jz == 0)
      boost::throw_exception(std::invalid_argument("Invalid value for coupling constants"));

    density_ = std::max(std::abs(Jz) / 2, (Jxy + std::abs(Jz)) / 4);
    if (std::abs(Jz) > Jxy) {
      freeze_ = 1 - Jxy / std::abs(Jz);
    } else {
      freeze_ = 0;
    }
    accept_p_ = std::max((Jxy + Jz) / (Jxy + std::abs(Jz)), double(0));
    accept_a_ = std::max((Jxy - Jz) / (Jxy + std::abs(Jz)), double(0));
  }

  double density() const { return density_; }
  double freeze() const { return freeze_; }
  double accept_p() const { return accept_p_; }
  double accept_a() const { return accept_a_; }
  double accept(int c0, int c1) const {
    return (c0 ^ c1) ? accept_a_ : accept_p_;
  }

private:
  double density_;
  double freeze_;
  double accept_p_;
  double accept_a_;
};

} // end namespace looper

#endif // LOOPER_WEIGHT_H
