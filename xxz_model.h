/**************************************************************************** 
*
* alps/looper: multi-cluster quantum Monte Carlo algorithm for spin systems
*              in path-integral and SSE representations
*
* $Id: xxz_model.h 408 2003-10-10 09:34:54Z wistaria $
*
* Copyright (C) 1997-2003 by Synge Todo <wistaria@comp-phys.org>,
*
* Permission is hereby granted, free of charge, to any person or organization 
* obtaining a copy of the software covered by this license (the "Software") 
* to use, reproduce, display, distribute, execute, and transmit the Software, 
* and to prepare derivative works of the Software, and to permit others
* to do so for non-commerical academic use, all subject to the following:
*
* The copyright notice in the Software and this entire statement, including 
* the above license grant, this restriction and the following disclaimer, 
* must be included in all copies of the Software, in whole or in part, and 
* all derivative works of the Software, unless such copies or derivative 
* works are solely in the form of machine-executable object code generated by 
* a source language processor.
*
* In any scientific publication based in part or wholly on the Software, the
* use of the Software has to be acknowledged and the publications quoted
* on the web page http://www.alps.org/license/ have to be referenced.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
* DEALINGS IN THE SOFTWARE.
*
**************************************************************************/

#ifndef LOOPER_XXZ_MODEL_H
#define LOOPER_XXZ_MODEL_H

#include "xxz_matrix.h"
#include <alps/parameters.h>
#include <alps/lattice.h>
#include <alps/model.h>

namespace looper {

struct xxz_parameter
{
  xxz_parameter() : C(), Jxy(), Jz() {}
  xxz_parameter(double c, double jxy, double jz) : C(c), Jxy(jxy), Jz(jz) {}
  double C, Jxy, Jz;
};

class xxz_model
{
public:
  typedef int type_type;
  typedef std::map<type_type, alps::half_integer<int> > spin_type;
  typedef std::map<type_type, xxz_parameter> bond_type;

  template<class G>
  xxz_model(const alps::Parameters params, const G& graph,
	    const alps::ModelLibrary& models) : spin_(), bond_()
  { set_parameters(params, graph, models); }
  
  template<class G>
  void set_parameters(const alps::Parameters params,
		      const G& graph,
		      const alps::ModelLibrary& models)
  {
    typedef G graph_type;
    typedef boost::graph_traits<graph_type>::vertex_iterator vertex_iterator;
    typedef boost::graph_traits<graph_type>::edge_iterator edge_iterator;
    
    // get Hamilton operator
    alps::HamiltonianDescriptor<short> hd(models.hamiltonian(params["MODEL"]));
    alps::Parameters p(params);
    p.copy_undefined(hd.default_parameters());
    hd.set_parameters(p);
    
    // get site parameters
    alps::property_map<alps::site_type_t, graph_type, type_type>::const_type
      site_type(alps::get_or_default(alps::site_type_t(), graph, 0));

    vertex_iterator vi_end = boost::vertices(graph).second;
    for (vertex_iterator vi = boost::vertices(graph).first; vi != vi_end;
	 ++vi) {
      type_type t = site_type[*vi];
      if (!spin_.count(t))
	spin_[t] = (double(hd.basis().site_basis(t).num_states()) - 1) / 2;
    }

    // get bond parameters
    std::map<boost::tuple<type_type, type_type, type_type>, bool> bond_visited;
    alps::property_map<alps::bond_type_t, graph_type, type_type>::const_type
      bond_type(alps::get_or_default(alps::bond_type_t(), graph, 0));

    edge_iterator ei_end = boost::edges(graph).second;
    for (edge_iterator ei = boost::edges(graph).first; ei != ei_end; ++ei) {
      type_type bt = bond_type[*ei];
      type_type st0 = site_type[boost::source(*ei, graph)];
      type_type st1 = site_type[boost::target(*ei, graph)];
      if (!bond_visited[boost::make_tuple(bt, st0, st1)]) {
	bond_visited[boost::make_tuple(bt, st0, st1)] = true;
	boost::multi_array<double ,4> bm =
	  hd.bond_term(bt).template matrix<double>(hd.basis().site_basis(st0),
						   hd.basis().site_basis(st1),
						   models.simple_operators(),
						   p);
	boost::tuple<bool, double, double, double>
	  fit = fit2xxz(spin_[st0], spin_[st1], bm);
	if (!fit.get<0>())
	  boost::throw_exception(std::runtime_error("fitting to XXZ model failed"));
	if (bond_.count(bt)) {
	  if (bond_[bt].C != fit.get<1>() ||
	      bond_[bt].Jxy != fit.get<2>() ||
	      bond_[bt].Jz != fit.get<3>())
	    boost::throw_exception(std::runtime_error("inconsistent bond parameter(s)"));
	} else {
	  bond_[bt] = xxz_parameter(fit.get<1>(), fit.get<2>(), fit.get<3>());
	}
      }
    }
  }
  
  int num_spin_types() const { return spin_.size(); }
  bool is_uniform_spin() const { return num_spin_types() == 1; }
  alps::half_integer<int> spin(type_type t) const
    { return spin_.find(t)->second; }
  alps::half_integer<int> uniform_spin() const
  {
    assert(is_uniform_spin());
    return spin_.begin()->second;
  }

  int num_bond_types() const { return bond_.size(); }
  bool is_uniform_bond() const { return num_bond_types() == 1; }
  xxz_parameter bond(type_type t) const
    { return bond_.find(t)->second; }
  xxz_parameter uniform_bond() const
  {
    assert(is_uniform_bond());
    return bond_.begin()->second;
  }

private:
  std::map<type_type, alps::half_integer<int> > spin_;
  std::map<type_type, xxz_parameter> bond_;
};

} // end namespace looper

#endif LOOPER_XXZ_MODEL_H
