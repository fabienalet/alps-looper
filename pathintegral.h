/**************************************************************************** 
*
* alps/looper: multi-cluster quantum Monte Carlo algorithm for spin systems
*              in path-integral and SSE representations
*
* $Id: pathintegral.h 431 2003-10-16 09:24:06Z wistaria $
*
* Copyright (C) 1997-2003 by Synge Todo <wistaria@comp-phys.org>,
*
* Permission is hereby granted, free of charge, to any person or organization 
* obtaining a copy of the software covered by this license (the "Software") 
* to use, reproduce, display, distribute, execute, and transmit the Software, 
* and to prepare derivative works of the Software, and to permit others
* to do so for non-commerical academic use, all subject to the following:
*
* The copyright notice in the Software and this entire statement, including 
* the above license grant, this restriction and the following disclaimer, 
* must be included in all copies of the Software, in whole or in part, and 
* all derivative works of the Software, unless such copies or derivative 
* works are solely in the form of machine-executable object code generated by 
* a source language processor.
*
* In any scientific publication based in part or wholly on the Software, the
* use of the Software has to be acknowledged and the publications quoted
* on the web page http://www.alps.org/license/ have to be referenced.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
* DEALINGS IN THE SOFTWARE.
*
**************************************************************************/

#ifndef LOOPER_PATHINTEGRAL_H
#define LOOPER_PATHINTEGRAL_H

#include "graph.h"
#include <boost/throw_exception.hpp>
#include <cmath>
#include <stdexcept>

namespace looper {

namespace path_integral {

template<class M, class G>
double energy_offset(const M& model, const G& graph)
{
  typedef typename boost::graph_traits<G>::edge_iterator edge_iterator;

  double offset = 0;
  typename alps::property_map<alps::bond_type_t, G, int>::const_type
    bond_type(alps::get_or_default(alps::bond_type_t(), graph, 0));
  edge_iterator ei_end = boost::edges(graph).second;
  for (edge_iterator ei = boost::edges(graph).first; ei != ei_end; ++ei)
    offset += model.bond(bond_type[*ei]).C;
  return offset;
}

class weight
{
public:
  static double range_01(double x)
  {
    return std::min(std::max(x, double(0.)), double(1.));
  }
    
  template<class P>
  weight(const P& p)
  {
    double Jxy = std::abs(p.Jxy); // ignore negative signs
    double Jz = p.Jz;
    if (Jxy == 0 && Jz == 0)
      boost::throw_exception(std::invalid_argument("Invalid values for coupling constants"));
    
    density_ = std::max(std::abs(Jz) / 2, (Jxy + std::abs(Jz)) / 4);
    freeze_ = range_01(1 - Jxy / std::abs(Jz));
    accept_p_ = range_01((Jxy + Jz) / (Jxy + std::abs(Jz)));
    accept_a_ = range_01((Jxy - Jz) / (Jxy + std::abs(Jz)));
    reflect_ = range_01((Jxy - Jz) / (2 * Jxy));
  }

  double density() const { return density_; }
  double freeze() const { return freeze_; }
  double accept_p() const { return accept_p_; }
  double accept_a() const { return accept_a_; }
  double accept(int c0, int c1) const {
    return (c0 ^ c1) ? accept_a_ : accept_p_;
  }
  double reflect() const { return reflect_; }

private:
  double density_;
  double freeze_;
  double accept_p_;
  double accept_a_;
  double reflect_;
};

} // end namespace path_integral

} // end namespace looper

#endif // LOOPER_PATHINTEGRAL_H
