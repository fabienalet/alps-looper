/**************************************************************************** 
*
* alps/looper: multi-cluster quantum Monte Carlo algorithm for spin systems
*              in path-integral and SSE representations
*
* $Id: loop.h 422 2003-10-15 10:50:28Z wistaria $
*
* Copyright (C) 1997-2003 by Synge Todo <wistaria@comp-phys.org>,
*
* Permission is hereby granted, free of charge, to any person or organization 
* obtaining a copy of the software covered by this license (the "Software") 
* to use, reproduce, display, distribute, execute, and transmit the Software, 
* and to prepare derivative works of the Software, and to permit others
* to do so for non-commerical academic use, all subject to the following:
*
* The copyright notice in the Software and this entire statement, including 
* the above license grant, this restriction and the following disclaimer, 
* must be included in all copies of the Software, in whole or in part, and 
* all derivative works of the Software, unless such copies or derivative 
* works are solely in the form of machine-executable object code generated by 
* a source language processor.
*
* In any scientific publication based in part or wholly on the Software, the
* use of the Software has to be acknowledged and the publications quoted
* on the web page http://www.alps.org/license/ have to be referenced.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
* DEALINGS IN THE SOFTWARE.
*
**************************************************************************/

#ifndef LOOPER_LOOP_H
#define LOOPER_LOOP_H

namespace looper {

struct loop_segment
{
  BOOST_STATIC_CONSTANT(int, undefined = -1);

  int index;

  loop_segment() : index(undefined) {}
  void reset() { index = undefined; }
  null_node& operator+=(const null_node&) { return *this; }
};

// helper functions

struct loop
{
  template<class T>
  static int index(const T& t)
  {
    t.root()->index;
  }

  template<class CONTAINER>
  static int set_indices(CONTAINER& cont)
  {
    typedef CONTAINER container_type;
    typedef typename container_type::iterator iterator;

    int n = 0; // number of loops
    
    iterator itr_end = cont.end();
    for (iterator itr = cont.begin(); itr != itr_end; ++itr) {
      if (itr->is_root()) {
	itr->index = n;
	++n;
      }
    }
    
    return n;
  }
};

} // end namespace looper

#endif // LOOPER_XXZ_H
