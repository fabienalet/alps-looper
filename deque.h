/**************************************************************************** 
*
* alps/looper: multi-cluster quantum Monte Carlo algorithm for spin systems
*              in path-integral and SSE representations
*
* $Id: deque.h 422 2003-10-15 10:50:28Z wistaria $
*
* Copyright (C) 1997-2003 by Synge Todo <wistaria@comp-phys.org>,
*
* Permission is hereby granted, free of charge, to any person or organization 
* obtaining a copy of the software covered by this license (the "Software") 
* to use, reproduce, display, distribute, execute, and transmit the Software, 
* and to prepare derivative works of the Software, and to permit others
* to do so for non-commerical academic use, all subject to the following:
*
* The copyright notice in the Software and this entire statement, including 
* the above license grant, this restriction and the following disclaimer, 
* must be included in all copies of the Software, in whole or in part, and 
* all derivative works of the Software, unless such copies or derivative 
* works are solely in the form of machine-executable object code generated by 
* a source language processor.
*
* In any scientific publication based in part or wholly on the Software, the
* use of the Software has to be acknowledged and the publications quoted
* on the web page http://www.alps.org/license/ have to be referenced.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
* DEALINGS IN THE SOFTWARE.
*
**************************************************************************/

#ifndef LOOPER_DEQUE_H
#define LOOPER_DEQUE_H

#include <algorithm>
#include <deque>
#include <functional>
#include <utility>
#include <vector>

namespace looper {
  
template<class D>
class deque_index_helper
{
public:
  typedef typename D::value_type value_type;
  typedef typename D::size_type size_type;
  typedef std::pair<value_type *, size_type> pair_type;
  typedef std::vector<std::pair<value_type *, size_type> > map_type;

  deque_index_helper(const D& d) { build(d); }

  struct comp
  {
    bool operator()(const std::pair<value_type *, size_type>& x,
		    const value_type* y) const
    {
      return x.first < y;
    }
  };

  void build(const D& d)
  {
    // start address of first chunk
    map_.push_back(std::make_pair(&d[0], 0));

    size_type base = 0;
    for (;;) {
      if (base >= d.size()) break; // finish
      size_type step = 1;
      for (;;) {
	if (base + step >= d.size()) { step >>= 1; break; }
	step <<= 1;
      }
      size_type pos = base;
      for (;;) {
	if (&d[pos + step] - &d[base] == pos + step - base) { pos += step; }
	if (step == 1) break;
	step >>= 1;
      }
      base = pos + 1;
      if (base != d.size()) {
	map_type::iterator p = 
	  std::lower_bound(map_.begin(), map_.end(), std::make_pair(&d[base], 0), std::less<pair_type>());
	map_.insert(p, std::make_pair(&d[base], base));
      }
    }
  }

  size_type index(const value_type* ptr) const
  {
    map_type::const_iterator p = 
      std::lower_bound(map_.begin(), map_.end(), std::make_pair(ptr, 0), 
		       std::less<pair_type>());
    if (ptr != p->first) --p;
    return p->second
      + ((size_type)ptr - (size_type)(p->first)) / sizeof(value_type);
  }

private:
  map_type map_;
};

} // end namespace looper

#endif // LOOPER_DEQUE_H
