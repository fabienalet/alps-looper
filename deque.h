/**************************************************************************** 
*
* alps/looper: multi-cluster quantum Monte Carlo algorithm for spin systems
*              in path-integral and SSE representations
*
* $Id: deque.h 423 2003-10-15 21:45:18Z wistaria $
*
* Copyright (C) 1997-2003 by Synge Todo <wistaria@comp-phys.org>,
*
* Permission is hereby granted, free of charge, to any person or organization 
* obtaining a copy of the software covered by this license (the "Software") 
* to use, reproduce, display, distribute, execute, and transmit the Software, 
* and to prepare derivative works of the Software, and to permit others
* to do so for non-commerical academic use, all subject to the following:
*
* The copyright notice in the Software and this entire statement, including 
* the above license grant, this restriction and the following disclaimer, 
* must be included in all copies of the Software, in whole or in part, and 
* all derivative works of the Software, unless such copies or derivative 
* works are solely in the form of machine-executable object code generated by 
* a source language processor.
*
* In any scientific publication based in part or wholly on the Software, the
* use of the Software has to be acknowledged and the publications quoted
* on the web page http://www.alps.org/license/ have to be referenced.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
* DEALINGS IN THE SOFTWARE.
*
**************************************************************************/

#ifndef LOOPER_DEQUE_H
#define LOOPER_DEQUE_H

#include <algorithm>
#include <deque>
#include <functional>
#include <utility>
#include <vector>

namespace looper {
  
template<class C> class index_helper;

template<class T, class Alloc>
class index_helper<std::deque<T, Alloc> >
{
public:
  typedef typename std::deque<T, Alloc>::value_type              value_type;
  typedef typename std::deque<T, Alloc>::size_type               size_type;
  typedef std::vector<std::pair<const value_type *, size_type> > map_type;

  index_helper(const std::deque<T, Alloc>& a) { init(a); }

  size_type num_chunks() const { return map_.size(); }

  void init(const std::deque<T, Alloc>& a)
  {
    map_.clear();

    if (a.size()) {
      // start address of first chunk
      map_.push_back(std::make_pair(&a[0], 0));
      
      size_type base = 0;
      for (;;) {
	if (base >= a.size()) break; // finish
	size_type step = 1;
	for (;;) {
	  if (base + step > a.size()) { step >>= 1; break; }
	  step <<= 1;
	}
	size_type pos = base;
	for (;;) {
	  if (&a[pos + step] - &a[base] == pos + step - base) { pos += step; }
	  if (step == 1) break;
	  step >>= 1;
	}
	base = pos + 1;
	if (base < a.size())
	  map_.push_back(std::make_pair(&a[base], base));
      }
      std::sort(map_.begin(), map_.end());
    }
  }

  struct match
  {
    bool operator() (const std::pair<const value_type *, size_type>& x,
		     const std::pair<const value_type *, size_type>& y) const
    {
      return x < y;
    }
  };

  size_type index(const value_type* ptr, bool debug = false) const
  {
    typename map_type::const_iterator p = 
      std::lower_bound(map_.begin(), map_.end(), std::make_pair(ptr, 0),
		       //match());
    std::less<std::pair<const value_type *, size_type> >());
    //if (debug) {
    //std::cout << ptr << ' ' << (p->first) << std::endl;
    //}
    if (p == map_.end() || ptr != p->first) --p;
    if (debug) {
      std::cout << "p: " << ptr << " = " << p->second << " + "
		<< (ptr - (p->first)) << std::endl;
      // std::cout << ptr << ' ' << (p->first) << std::endl;
    }

    return p->second
      + ((size_type)ptr - (size_type)(p->first)) / sizeof(value_type);
  }

  // for debugging
  void output() const
  {
    std::cout << "number of chunks = " << map_.size() << std::endl;
    for (typename map_type::const_iterator itr = map_.begin();
	 itr != map_.end(); ++itr) {
      std::cout << itr->first << ' ' << itr->second << std::endl;
    }
    std::cout << map_.end()->first << ' ' << map_.end()->second << std::endl;
  }
private:
  map_type map_;
};

} // end namespace looper

#endif // LOOPER_DEQUE_H
